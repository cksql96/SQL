-- ------------------------------------------------------
-- 1. 사용자 관리
-- ------------------------------------------------------
--  가. 다수의 사용자들이 하나의 데이터베이스를 공유하여 사용
--  나. 정보의 공유상, 
--      a. 정보의 유출
--      b. 불법적인 접근
--      에 대한 접근통제(Access Control) 필요
--  다. Oracle은 접근통제(보안대책)을 위해, 아래 접근통제를 사용
--      a. 인증(Authentication)
--      b. 인가(Authorization)
--      각 사용자의 DB 접근/사용에 대해 보안 유지
--  라. 인증(Authentication)
--      사용자 계정의 생성/암호변경/DB자원사용을 통제를 위해,
--      DB 접근 및 사용을 통제하는 것을 의미
--  마. 인가(Authorization)
--      DB 객체에 대한 사용자의 접근/사용을 통제하는 포괄적 개념
-- ------------------------------------------------------


-- ------------------------------------------------------
-- 1-1. 사용자 계정 생성
-- ------------------------------------------------------
--  가. DB 관리자(SYSDBA role 가진)만 가능
--  나. 생성된 사용자는 아무런 권한(Privileges) 도 없음
--  다. 생성된 사용자는, 가장 기본적인 DB 접속조차 불가
-- ------------------------------------------------------
-- Basic syntax:
--
--  CREATE USER 사용자계정
--  IDENTIFIED BY 비밀번호;
-- ------------------------------------------------------

-- ------------------------------------------------------
-- 사용자 계정 생성시, 암호의 길이가 12 바이트 미만인 경우 오류발생
-- ------------------------------------------------------
-- *** 암호생성규칙 (Oracle12c 이상부터) ***
-- ------------------------------------------------------
--  a. 총 12문자 이상
--  b. 최소 1개 이상의 영문 대문자와 소문자 포함
--  c. 최소 1개 이상의 숫자 포함
--  d. 이전 암호 재사용 불가
--  e. 사용자계정명을 암호에 포함불가
-- ------------------------------------------------------
--sys계정으로.
CREATE USER
    user01
IDENTIFIED BY
    user01;

-- ------------------------------------------------------
-- 1-2. 사용자 계정 암호변경
-- ------------------------------------------------------
--  가. 생성된 사용자 계정의 암호를 변경
-- ------------------------------------------------------
-- Basic syntax:
--
--  ALTER USER 사용자계정
--  IDENTIFIED BY 비밀번호;
-- ------------------------------------------------------
ALTER USER
    user01
IDENTIFIED BY
    oracle;

-- ------------------------------------------------------
-- 1-3. 시스템권한 할당전 접속시도
-- ------------------------------------------------------
--  가. 생성된 사용자 계정은 아무런 권한(Privileges)이 없음
--  나. 생성된 사용자 계정으로 DB에 접속하려면,
--      아래의 시스템 권한(System Prvilges) 할당받아야 함
--      
--      CREATE SESSION 시스템 권한    
--  
--  다. 시스템 권한은, DB관리자(SYSDBA role)만이 할당가능
-- ------------------------------------------------------


-- ------------------------------------------------------
-- 2. 권한(Privileges) 할당 (DCL: Data Control Language)
-- ------------------------------------------------------
--  가. 특별한 SQL문장을 수행할 수 있는 권리 의미
--  나. 테이블 생성/인덱스 생성/테이블에 데이터 CRUD 같은,
--      SQL 문장을 수행하려면, 각각의 권리가 필요 -> 이것이 "권한"
--  다. 권한은 두가지로 구분:
--      (1) 시스템 권한 (System Privileges)
--          a. Database-level Privileges
--          b. DBA(SYSDBA role)만이 권한부여 가능
--          c. 예: DB 접속, 사용자 생성, 뷰(View) 생성 등
--          d. DB에 특별한 작업을 수행할 수 있게 해줌
-- 
--      (2) 객체 권한 (Object Privileges)
--          a. Database Object-level Privileges
--          b. 해당 객체의 소유자(owner)가 권한부여 가능
--          c. 특정 객체에 대하여, CRUD 같은 작업 수행을 가능하게 함
-- ------------------------------------------------------

-- ------------------------------------------------------
-- 2-1. 시스템 권한(System Privileges) 할당(DCL: GRANT 문장)
-- ------------------------------------------------------
--  가. DBA(SYSDBA role)가 생성한 일반계정은,
--      a. DB 접속불가
--      b. Table, View, Index 등의 Oracle 객체 생성불가
--      c. b의 작업을 수행가능하려면, 각각 권한을 할당받아야 함
--  나. '가'의 작업을 수행가능하게 하는 권한을 의미
--  다. 두가지 종류의 권한이 있음:
--      (1) DBA가 가지는 시스템 권한
--          SystemPrivilges_owned_by_DBA.JPG 참고
--      (2) DBA가 일반사용자에게 부여가능한 시스템 권한
--          (이외에도, 약 100개 이상의 시스템권한이 있음, 헉!!~~)
--          SystemPrivilges_that_could_be_assigned_by_DBA.JPG 참고
--  라. 일단 일반계정 생성 후에, DBA(SYSDBA role)는 기본적인
--      몇가지의 중요한 시스템 권한을 해당 사용자에게 할당해줘야 함
-- ------------------------------------------------------
-- Basic syntax:
--  
--  GRANT 시스템권한1 [, 시스템권한2, ...]
--  TO { 사용자계정 | role | PUBLIC }
--  [WITH ADMIN OPTION] ;
--
--  * 시스템권한[1~n]: 부여할 시스템 권한 항목 나열
--  * role(역할): 한 개 이상의 권한들의 집합(****)
--    권한의 부여/취소 작업을 용이하게 하기 위해 사용
--  * PUBLIC: DB내의 모든 계정 의미 (****)
--    DB 내의 모든 사용자 계정에, 특정 시스템 권한을 한번에 부여
--  * WITH ADMIN OPTION :
--      a. 임의의 사용자가, DBA로부터 부여받은 권한을,
--         다른 사용자에게 재부여 할 수 있도록 한다
--      b. 즉, 부여한 시스템 권한을 위임(delegation) 하는 기능(***)
--      c. 따라서, 주의해서 사용해야 함(***)
--      d. (**주의**) DBA가 해당 시스템 권한을 회수(revoke)
--         하더라도, 한번 위임된 시스템 권한은, 연쇄적으로(Cascade)
--         회수(revoke)가 되지 않음.
--      e. Revoking_delegated_system_privileges.JPG 이미지 참고
-- ------------------------------------------------------

-- user01 일반계정에,
--  CREATE SESSION (DB접속 시스템권한),
--  CREATE TABLE (table 생성 시스템권한)
-- 할당(부여)
GRANT
    CREATE SESSION,
    CREATE TABLE
TO
    user01;


-- ------------------------------------------------------
-- 2-3. 할당한 시스템권한 회수(DCL: REVOKE 문장)
-- ------------------------------------------------------
--  가. DBA(SYSDBA role)가 일반계정에 부여한 시스템 권한은
--      언제든지 회수(revoke) 가능
-- ------------------------------------------------------
-- Basic syntax:
--
--  REVOKE 회수할시스템권한1 [, 회수할시스템권한2, ...]
--  FROM { 사용자계정 | role | PUBLIC };
--
--  * REVOKE clause: 회수할 시스템권한들 나열
--  * FROM clause: 시스템 권한을 회수할 대상 지정
--  * PUBLIC: DB 내에 존재하는 모든 일반계정(사용자)에게서,
--            지정된 시스템 권한을 한번에 회수(revoke)
-- ------------------------------------------------------
--회수하기
REVOKE
    CREATE SESSION,
    CREATE TABLE
FROM
    user01;

GRANT
    CONNECT,
    RESOURCE,
    UNLIMITED TABLESPACE
TO
    user01;


GRANT 
	CONNECT,
	RESOURCE,
	UNLIMITED TABLESPACE 
TO 
	user02 
IDENTIFIED BY 
	oracle;