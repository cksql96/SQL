--SELECT()의 GROUP 함수문
--COUNT(),COUNT(*),SUM(),AVG(),MAX(),MIN(),STDDEV() -표준편차,VARIANCE() -분산
SELECT MAX(ENR_GRADE),MIN(ENR_GRADE)
FROM ENROL;

--학생테이블에서 학생들의 최저체중 최고체중
SELECT * FROM STUDENT;
SELECT MIN(STU_WEIGHT),MAX(STU_WEIGHT)
FROM STUDENT;
SELECT COUNT(*),COUNT(STU_HEIGHT)
FROM STUDENT;

--컴퓨터정보과 학생들의 체중 합,평균
SELECT SUM(STU_WEIGHT),AVG(STU_WEIGHT)
FROM STUDENT
WHERE STU_DEPT='컴퓨터정보';

--별칭을 사용해 학생테이블에서 학생,신장합,해당학생수,평균신장으로 데이터를 검색
SELECT COUNT(*) 학생,SUM(STU_HEIGHT) 신장합,COUNT(STU_HEIGHT) 해당학생수,AVG(STU_HEIGHT) 평균신장
FROM STUDENT;

--GROUP BY절...
--학생테이블에서 학과별 평균체중을 구하라?
SELECT STU_DEPT,AVG(SYU.WEIGHT)
FROM STUDENT
GROUP BY STU_DEPT;
--학생테이블에서 체중이 50KG이상인 학생들만 학과별로 선택하여 
--그룹별 학생수를 검색하라?
SELECT STU_DEPT,COUNT(*)
FROM STUDENT
WHERE STU_WEIGHT>=50
GROUP BY STU_DEPT;
--학생테이블에서 학과별, 학년별로 그룹화하여 학생수를 검색하라?
SELECT STU_DEPT,STU_GRADE,COUNT(*)
FROM STUDENT
GROUP BY STU_DEPT,STU_GRADE;

--HAVING절?
--기계과 학생들중에서 학년별 평균신장이 160이상인 학년과
--평균신장을 검색해라
SELECT STU_GRADE,AVG(STU_HEIGHT)
FROM STUDENT
WHERE STU_DEPT='기계'
GROUP BY STU_GRADE HAVING AVG(STU_HEIGHT)>=160;
--최대신장이 175이상인 학과와 학과별 최대신장을 구하라?
SELECT STU_DEPT,MAX(STU_HEIGHT)
FROM STUDENT
GROUP BY STU_DEPT HAVING MAX(STU_HEIGHT)>=175;

--학과별 평균신장이 가장높은 평균신장을 구하라?
SELECT MAX(AVG(STU_HEIGHT))
FROM STUDENT
GROUP BY STU_DEPT;

--CROSS JOIN
SELECT * FROM STUDENT;
SELECT * FROM ENROL;
SELECT STUDENT.*,ENROL.*
FROM STUDENT
CROSS JOIN ENROL;
--EQUAL JOIN 공통컬럼내용이 있을때
--WHERE절에 의한것
--문법 이건 오류가뜬가 SELECT STUDENT.STU_NO,STU_NAME,STU_DUPT,ENR_GRADE
--                  FROM STUDENT,
--                  WHERE STUDENT.STU_NO=ENROL.STU_NO; --공통부분이 같았을때 즉 교집합일때

SELECT STUDENT.STU_NO,STU_NAME,STU_DUPT,ENR_GRADE
FROM STUDENT,ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO; --공통부분이 같았을때 즉 교집합일때
--오류가 뜬다

--NATURAL JOIN 더 간단하게. 만들어서 쓰면
SELECT STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT NATURAL JOIN ENROL;

SELECT *
FROM STUDENT;

SELECT *
FROM ENROL;

SELECT STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT NATURAL JOIN ENROL;


--JOIN ~USING
SELECT STU_NO,STU_NAME,STU_DEPT, ENR_GRADE
FROM STUDENT JOIN ENROL USING (STU_NO);

SELECT SUT_NAME
FROM STUDENT JOIN ENROL USING ENR_GRADE);
--JOIN ~ON
SELECT STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT JOIN ENROL ON(STU_NO); --에러가 뜬가

SELECT ENROL.STU_NO,STU_NAME,STU_DEPT,ENR_GRADE
FROM STUDENT JOIN ENROL ON(STUDENT.STU_NO=ENROL.STU_NO);

--WHERE절의 사용방법들
--학생테이블과 수강테이블에서 101번 과목을 수강하는 학생들의 
--학번과 이름, 성적을 검색하라?
SELECT STUDENT.STU_NO,STU_NAME,ENR_GRADE
FROM STUDENT,ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND SUB_NO=101;
--점수 70점 이상인 학생 이름을 검색하라
SELECT STU_NAME 
FROM STUDENT,ENROL
WHERE ENROL.STU_NO=STUDENT.STU_NO AND ENR_GRADE>=70;
--점수가 60점 이상인 학생
SELECT STU_NAME 
FROM STUDENT,ENROL
WHERE ENROL.STU_NO=STUDENT.STU_NO AND ENR_GRADE>=70;
--만약 OR 추가할 경우
SELECT STUDENT.STU_NO,STU_NAME,ENR_GRADE
FROM STUDENT,ENROL
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND (SUB_NO=101 OR SUB_NO=102); --AND OR 쓸때는 꼭 묶어줘야한다
--NATURAL JOIN을 사용한다면.
SELECT STU_NO, STU_NAME, ENR_GRADE
FROM STUDENT NATURAL JOIN ENROL
WHERE SUB_NO=101 OR SUB_NO=102;

--JOIN ~USING..
SELECT STU_NO,STU_NAME,ENR_GRADE
FROM STUDENT JOIN ENROL USING(STU_NO)
WHERE SUB_NO=101 OR SUB_NO=102;

SELECT STU_NAME,ENR_GRADE
FROM STUDENT JOIN ENROL USING(STU_NO)
WHERE ENR_GRADE>=60;

--JOIN ~ON..
SELECT ENROL.STU_NO,STU_NAME,ENR_GRADE
FROM STUDENT JOIN ENROL ON(STUDENT.STU_NO=ENROL.STU_NO)
WHERE SUB_NO=101 OR SUB_NO=102;
--과목테이블의 컴퓨터개론을 수강하는 학생들의 학번, 이름, 과목이름을
-- 검색하라?
SELECT * FROM SUBJECT;
SELECT * FROM STUDENT;
--SELECT STUDENT.STU_NO,STU_NAME,SUB_NAME
--FROM STUDENT,ENROL,SUBJECT
--WHERE STUDENT.STU_NO=ENROL.STU_NO
--AND ENROL.SUB_NO=SUBJECT.SUB_NO;
SELECT STUDENT.STU_NO,STU_NAME,SUB_NAME
FROM STUDENT,ENROL,SUBJECT
WHERE STUDENT.STU_NO=ENROL.STU_NO
AND ENROL.SUB_NO=SUBJECT.SUB_NO
AND SUB_NAME='컴퓨터개론'; --컴퓨터개론을 듣는 학생

SELECT STU_NO,STU_NAME, SUB_NAME
FROM STUDENT NATURAL JOIN ENROL NATURAL JOIN SUBJECT --;쳐서 마무리도됌
WHERE SUB_NAME='컴퓨터개론';

SELECT STU_NO, STU_NAME, SUB_NAME
FROM STUDENT JOIN ENROL USING(STU_NO)
JOIN SUBJECT USING(SUB_NO)
WHERE SUB_NAME='컴퓨터개론';

SELECT ENROL.STU_NO, STU_NAME,SUB_NAME
FROM STUDENT JOIN ENROL ON(STUDENT.STU_NO=ENROL.STU_NO)
JOIN SUBJECT ON(ENROL.SUB_NO=SUBJECT.SUB_NO)
WHERE SUB_NAME='컴퓨터개론';

--NON-EQUAL JOIN...
SELECT * FROM EMP;
SELECT * FROM SALGRADE; --1등급 700불에서 1200불
SELECT EMPNO,ENAME,SAL,GRADE
FROM EMP,SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL; --공통부모가 없는데 연결시키는 방법 BETWEEN

--SELF JOIN...
SELECT * FROM EMP;
SELECT A.EMPNO AS 사원번호, A.ENAME AS 사원이름,
B.EMPNO AS 상급자사원번호, B.ENAME AS 상급자이름
FROM EMP A, EMP B
WHERE A. MGR=B.EMPNO;
--수강테이블을 기준으로 과목 이름을 검색하라?
SELECT A.*,SUB_NAME
FROM ENROL A,SUBJECT B
WHERE A.SUB_NO=B.SUB_NO
ORDER BY 1;

SELECT A.*,SUB_NAME
FROM ENROL A RIGHT OUTER JOIN SUBJECT B
ON A.SUB_NO=B.SUB_NO
ORDER BY 1;

--부질의 (SUB_QUERY)
--옥성우 학생보다 신장이 큰 학생들의 학번,이름 신장을구해라
SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME='옥성우';

SELECT STU_NO,STU_NAME,STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT>=172
AND STU_NAME <>'옥성우'; --<>열외 

--두개를 하나로 합친것
SELECT STU_NO,STU_NAME,STU_HEIGHT
FROM STUDENT 
WHERE STU_HEIGHT>(SELECT STU_HEIGHT
FROM STUDENT
WHERE STU_NAME='옥성우');
--박희철 학생과 같은 체중을 가진 학생의 정보를 검색하라
SELECT *
FROM STUDENT;

SELECT *
FROM STUDENT
WHERE STU_WEIGHT=(SELECT STU_WEIGHT FROM STUDENT WHERE STU_NAME='박희철')
AND STU_NAME<>'박희철';

SELECT *
FROM STUDENT
WHERE STU_WEIGHT=(SELECT STU_WEIGHT FROM STUDENT WHERE STU_NAME='옥성우')
AND STU_NAME<>'옥성우';

--신장이 전체학생들의 평균신장보다 큰 학생을 검색하라?
--신장이 모든학과들의 평균신장보다 큰 학생의 정보를 검색하라?
-- 즉 평균신장보다 큰 학생들중에 제일 큰 학생
SELECT *
FROM STUDENT
WHERE STU_HEIGHT> (SELECT AVG(STU_HEIGHT)
FROM STUDENT);


SELECT *
FROM STUDENT
WHERE STU_HEIGHT >ALL(SELECT AVG(STU_HEIGHT)
FROM STUDENT
GROUP BY STU_DEPT);

--컴퓨터정보과의 최소신장과 비교하여 최소신장이 더 큰 학과의 학과명과 최소신장을 검색하라?
SELECT STU_DEPT,MIN(STU_HEIGHT)
FROM STUDENT
GROUP BY STU_DEPT HAVING MIN(STU_HEIGHT)> --HAVING 그런데 조건이 있다
(SELECT MIN(STU_HEIGHT) FROM STUDENT  WHERE STU_DEPT='컴퓨터정보');
--복수열 부질의...
CREATE TABLE TEST(EMPNO,ENAME,SAL,COMM,DEPTNO)
AS SELECT EMPNO,ENAME,SAL,COMM,DEPTNO
FROM EMP
WHERE DEPTNO=1;
DESC TEST;
INSERT INTO TEST VALUES(11,'APPLE',1000,NULL,30); --EMPNO ...총 5개 삽입함
INSERT INTO TEST VALUES(12,'BANANA',2000,100,30);
INSERT INTO TEST VALUES(13,'CHEESE',1000,0,10);
INSERT INTO TEST VALUES(14,'DOG',2000,NULL,20);
INSERT INTO TEST VALUES(15,'EGG',1000,100,20);

SELECT * FROM TEST;